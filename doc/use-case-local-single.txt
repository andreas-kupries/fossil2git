
Use Case / Scenario / Story 1
=============================

Background
==========

	You have to generate notification emails for some or all
	changes to a fossil repository R.

	You are not only superuser of the prioject, you also have full
	access to the master repository file, and are providing access
	to it through a web server under your control.

Here is how you do this with FX, the eXtended Fossil manager
============================================================

I. Basic Setup
--------------

As you have full access there is no need for the basic setup a remote
user has to go through (see use case 0).

We can jump directly to the extended configuration with FX to make the
repository ready for monitoring and generation of notifications.

II. Mail setup
--------------

The first part of the extended setup deals with all the information
required to properly mail the notifications generated later. I.e. the
system has to know to whom to talk to for sending mail, relevant
credentials, etc.

All of the following assumes that 'source.fossil' in the current
working directory is the repository file. Change this to match your
setup. Comments will be interspersed with the commands themselves.

	fx repository set source.fossil

While "fx" supports the same -R option as "fossil" itself it also does
have the concept of a "default repository". Setting this information
means that all the following commands will use that repository without
requiring an explicit specification. While that is not as important in
scripts (*) it does makes interactive use easier, due to less
(repetitive) typing.

	fx note config set host     shawmail.glb.shawcable.net
	fx note config set user     ************ use your mail credentials as per your ISP or network admin
	fx note config set password ************
	fx note config set sender   akupries@shaw.ca
	fx note config set location YOUR_URL

Setting the variable 'debug' (not shown here) to 1 tells FX to show the
SMTP dialog with the configured server when sending mail. Usually we
do not need this, except when having to debug problems in this
area. (**)

The 'host' is the machine to talk to for sending mail. The example
contains the name I got from my ISP, Shaw.ca.

The 'port' setting is not shown here, leaving it at the default of 25,
which is the standard SMTP port.

The credentials 'user' and 'password' are what is required for the
shaw server to accept mail from me.

The 'tls' setting, again not shown, has to be set to true if the host
can accept connections secured with TLS/SSL, or maybe even only
accepts such.

The 'sender' setting will be used as the 'From' address in the
generated mails. Bounces and other problems found by the larger system
will be mailed back to this address. It is thus strongly recommended
to make this a proper and valid address, for the person which manages
this setup. This might be you.

The last setting is 'location'. In the remote case this can be infered
by FX from the peer the copy was cloned from. Here we are working with
the master and have to explicitly tell the system under what url it is
exposed to the outside world (or the inside net). In the example
YOUR_URL is the placeholder for whatever url you are using.

This is actually the only setting which MUST be configured for each
repository. All the other settings are something which can be
configured globally for all repositories, like with

	fx note config set -global host shawmail.glb.shawcable.net

thus sharing the mail setup. In this example of watching just a single
repository this is not as important than when we go and watch multiple
repositories.

The last action in this section is to generate a readable backup of
the mail setup. Together with the complementary 'note config import'
command this is another way of copying a setup around and applying it
to multiple repositories.

	fx note config export -o source.mail-config

--
(Ad *): In scripts this may actually be a bad thing, as it introduces
	state we have reset/unset in case of errors.

(Ad **): This is handled by the smtp and mime packages in Tcllib.


III. Routing setup
------------------

We are getting nearer to a complete setup. The last thing we must do
before we can run the mail notification commands is to determine which
repository changes we are interested in (or rather wish to make
known), and where to send the mail when they happen.

In my case I am interested in all of them and want to be notified in
my personal account, thus I run

	fx note route add all 'Andreas Kupries <akupries@shaw.ca>'

The "all" is a catch-all term for all possible events|changes. For
details use the introspection command

	fx note route events

which will list the possible event we can use instead of "all" above.

In a more general setup the destination address would more likely be
the mailing list people can subscribe to for notifications from the
repository.

The second part of the routing is about dynamic addressing. This is
something we can only do for ticket changes, and is the reason why we
wanted the "ticket" configuration" at the beginning. The introspection command

       fx note route fields

shows which ticket fields are available. In my setup, for Tcl, I then use

	fx note route field add assignee closer login private_contact submitter username

to tell FX which of these fields may contain email addresses.

FX will automatically maintain a per-ticket history of these fields
and use the information to send mail notifications to all people
relevant to a new ticket change, i.e. the people doing the change,
being assigned to the ticket, etc.

The last action is again the generation of a readable backup of the
routing setup. Together with the complementary 'note route import'
command this is enables us to apply the same routing setup to multiple
repositories. (We currently do not support global shared routing).

	fx note route export -o source.routes

IV. Testing
-----------

While we are in principle done with the setup and can go and start the
monitoring itself I believe that it is a good idea to testing things
first before jumping in.

	fx test mail-setup 'Andreas Kupries <andreask@activestate.com>'

The first, above, is a general test that the configured mail settings
work. It sends a fixed mail to the specified destination address,
using all the settings of chapter II.

	fx note update-history

This command explicitly updates the cached history of the ticket
fields mentioning in the dynamic routing (see last chapter). As this
initial run can take some time, having to process the entire existing
history it feels nicer to do this separately instead as part of the
following commands.

	fx test manifest-parse --all
	fx test mail-receivers --all
	fx test mail-for       --all

These commands go over all the changes and check that FX is able to
parse their manifests, can generate the list of destination mail
addresses for them, and generate mail for them.

Any errors are shown in the resulting table.

This is less of a test of the repository but a test that FX can deal
with all the data found in the repository. This is especially useful
when operating on large repositories, like Tcl, Tk, etc. as this is
essentially a stress-test of the FX internals, with a higher
probaility of testing even things which are usually not found (like,
for example, signed manifests, huge manifests, etc).

V. Cleanup
----------

Remember the first command in chapter II.
Setting the default repository ?

Now that we have configured everything we need it is time to drop
this.

	fx repository reset

And another thing we really should do is

	fx note mark-notified --all

This tells FX that anything in the timeline i.e. change history should
NOT get notification mail.

If you forget this the first delivery run will generate mail for the
entire past history, thousands of them if the repository contains a
large one. Not a good idea to spam notifications for somethjing
several years in the past.

VI. Monitoring
--------------

With all the setup, configuration, and testing done we can finally go
and do the monitoring.

FX does not fully do everything by itself, but assumes that it will be
called from a cron job.

Here are my commands:

	fossil pull            -R $r
	fossil config pull all -R $r
	#fossil rebuild         -R $r
	#fx note show-pending   -R $r
	fx note deliver        -R $r

which does

- Get the new content
- Get updates to the configuration (especiallly new users!)

- Do NOT rebuild to follow fossil schema changes.
  This removes all information from our custom FX tables.
  (They are left existing, just empty).

- Showing the pending changes we got from the pull is not really needed either.
- But the last is import, run the mail generation and delivery
