#!/usr/bin/env tclsh

# Assumes that ssh has access to an ssh-agent providing all necessary
# keys for access to which git hosting service is used. (github, SF, google).

# Also assumes that the USER environment variable is set, and that
# PATH is sensible to find everything (git, fossil).

package require Tcl 8.5
package require fileutil
package require try

set theproject *

proc main {} {
    do {*}[cmdline]
    return
}


proc cmdline {} {
    global argv
    if {[llength $argv] != 1} { usage }
    return $argv
}

proc usage {} {
    global argv0
    puts stderr "Usage: $argv0 statedir"
    exit 1
}

proc do {statedir} {
    log "process '$statedir' ..."

    set ::env(TZ) UTC

    set trk $statedir/track
    if {[catch {
	set map [fileutil::cat $trk]
    }]} {
	set map {}
    }

    dict for {project remotes} $map {
	do1 $statedir $project $remotes
    }
    return
}

proc log {text} {
    global theproject
    puts "$theproject [now] $text"
    return
}

proc logfor {p} { set ::theproject $p }

proc user {} { set ::tcl_platform(user) }

proc do1 {statedir project remotes} {
    logfor $project
    log start

    # Keep in sync with setup-local
    set src    $statedir/in/$project.fossil
    set git    $statedir/out/$project
    set tmp    $statedir/tmp/[user].[pid].[now].$project
    set idfile $git/fossil-import-id
    set lock   $statedir/tmp/$project.lock

    file mkdir $tmp

    if {[file exists $lock]} {
	log "LOCKED, aborting"
	return
    }

    fileutil::touch $lock
    # TODO: signal handler to drop lock on unexpected exit.
    try {
	set first 0
	if {[catch {
	    set lastid [fileutil::cat $idfile]
	}]} {
	    set first 1
	    set lastid ""
	}

	silent fossil pull -R $src
	set currentid [getlast $src]

	log "last    = $lastid"
	log "current = $currentid"

	set url [runx fossil remote-url -R $src]

	if {$lastid eq $currentid} {
	    log "no new commits"
	    mkreadme $git $project $src [now]
	} else {
	    set elapsed [pull $project $src $tmp $git $first]
	    log "imported new commits to git mirror in $elapsed min"

	    # Remember how far we imported.
	    fileutil::writeFile $idfile $currentid

	    mkreadme $git $project $src [now]
	    foreach remote $remotes {
		push $git $remote
	    }
	}
    } finally {
	file delete -force $tmp
	file delete $lock
    }

    log done
}

proc now {} { clock format [clock seconds] -format {%Y-%m-%dT%H:%M:%S} }

proc getlast {repository} {
    set text [runx fossil timeline -R $repository -t ci -n 1]
    regexp {\[([0-9a-zA-Z]*)\]} $text -> id
    return $id
}

proc mkreadme {git project url date} {
    lappend map @PROJECT $project
    lappend map @URL     $url
    lappend map @DATE    $date
    
    fileutil::writeFile $git/README.html [string map $map {
	<p>This repository is a mirror of the <a href="@URL">@PROJECT fossil repository</a>.
	Last updated on @DATE.</p>
    }]
    return
}


proc pull {project src tmp git first} {
    set begin [clock seconds]

    file delete -force $tmp
    file mkdir         $tmp

    run git --bare  --git-dir $tmp init
    run fossil export -R $src --git | git --bare --git-dir $tmp fast-import

    # Ensure that the new repository contains the HEAD of the old
    # repository.  If something goes wrong in the import then all the
    # commit ids get peturbed from the point of corruption on up and
    # this test will fail. If all is ok then this id will be present
    # in the new repo and we can push the new commits.

    if {!$first} {
	if {[catch {
	    set ref [runx git --bare --git-dir $git rev-parse HEAD]
	    run git --bare --git-dir $tmp cat-file -e $ref
	} msg]} {
	    log "review $tmp for errors: $msg"
	    return 0
	}
    }

    # Rename trunk to master to suit git terminology better.
    file rename $tmp/refs/heads/trunk $tmp/refs/heads/master

    # Push the new changes from tmp to local destination
    run git --bare --git-dir $tmp remote add target $git
    run git --bare --git-dir $tmp push --force target --all
    run git --bare --git-dir $tmp push --force target --tags

    file delete -force $tmp
    set elapsed [expr {([clock seconds] - $begin)/60}]

    # Also - after the very first import you need to repack the git
    # repository using 'git repack -adf --window=50' to avoid an
    # excessively large repo.  git fast-import is fast, not space
    # efficient - so always repack.

    if {$first} {
	run git --bare  --git-dir $git repack -adf --window=50
    }

    # Done pulling in changes
    return $elapsed
}

proc push {git remote} {
    # Perform garbage collect as required

    set count [runx git --bare --git-dir $git count-objects | awk {{print $1}}]
    if {$count > 50} {
	run git --bare --git-dir $git gc
    }

    log "push to $remote"

    #return

    run git --bare --git-dir $git push --mirror $remote
    return
}

proc run {args} {
    #log "run $args"
    exec 2>@ stderr >@ stdout {*}$args
}

proc silent {args} {
    #log "silent $args"
    exec 2> /dev/null > /dev/null {*}$args
}

proc runx {args} {
    #log "run $args"
    exec 2>@ stderr {*}$args
}

main
exit
