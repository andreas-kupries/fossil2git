#!/usr/bin/env tclsh
# Update of database schema
# - Table seen
#   + column 'atime'
#   ~ unique(hash) ==> unique(pid,hash)
# - Table 'config'
#   + entry 'num-entries', default 200 for timeline.rss access.

package require Tcl 8.5
package require sqlite3

proc main {} {
    do {*}[cmdline]
    return
}

proc cmdline {} {
    global argv
    if {[llength $argv] != 0} { usage }

    #lassign $argv
    return $argv
}

proc usage {} {
    global argv0
    puts stderr "Usage: $argv0"
    exit 1
}

# # ## ### ##### ######## ############# ######################

proc dbfile {} {
    set f ~/.fossil.watch
    return $f
}

proc db {} {
    set watch [dbfile]
    if {![file exists $watch]} {
	puts "No database"
	return
    }
    sqlite3 DB $watch
    return
}

# # ## ### ##### ######## ############# ######################

proc do {} {
    db
    set now [clock seconds]

    DB transaction {
	DB eval {
	    -- New global configuration values
	    INSERT INTO config VALUES ('num-entries', 200);
	    INSERT INTO config VALUES ('days-to-expiry', 30);
	}
	DB eval [string map [list @@@ $now] {
	    -- Get old 'seen' out of the way, and expand it with the new
	    -- column, to set the default we want
	    ALTER TABLE seen     RENAME TO  seen_old ;
	    ALTER TABLE seen_old ADD COLUMN atime INTEGER DEFAULT @@@ ;
	}]
	DB eval {
	    -- New definition of 'seen' -- note the change of UNIQUE which made
	    -- this rename dance necessary
	    CREATE TABLE seen (
		sid   INTEGER PRIMARY KEY AUTOINCREMENT,
		pid   INTEGER REFERENCES project ( pid ),
		hash  STRING,
		atime INTEGER,
		UNIQUE ( pid, hash )
	    );
	}
	DB eval {
	    -- Copy data over, forcing the the new constraint
	    INSERT INTO seen (sid,pid,hash,atime)
	           SELECT     sid,pid,hash,atime
	           FROM seen_old;
	}
	DB eval {
	    -- And drop the old copy
	    DROP TABLE seen_old;
	}
    }
    return
}

# # ## ### ##### ######## ############# ######################

main
exit
