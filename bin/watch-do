#!/usr/bin/env tclsh
# Process watches on fossil repositories

# # ## ### ##### ######## ############# ######################

package require Tcl 8.5
package require sqlite3
package require http
package require tdom
package require struct::matrix
package require textutil::adjust
package require clock::iso8601

package require tls
package require smtp
package require mime

# # ## ### ##### ######## ############# ######################

proc main {} {
    do {*}[cmdline]
    return
}

proc cmdline {} {
    global argv
    variable mail 1
    variable dry  0
    #if {[llength $argv] != 0} { usage }

    foreach flag $argv {
	switch -exact -- $flag {
	    no-mail {
		variable mail 0
	    }
	    dry {
		variable dry 1
	    }
	    default {
		puts stderr "Bad flag \"$flag\", expected 'dry', or 'no-mail'"
		exit 1
	    }
	}
    }

    #lassign $argv
    return
}

proc usage {} {
    global argv0
    puts stderr "Usage: $argv0 ?dry|no-mail...?"
    exit 1
}

# # ## ### ##### ######## ############# ######################

proc dbfile {} {
    set f ~/.fossil.watch
    return $f
}

proc db {} {
    set watch [dbfile]
    if {![file exists $watch]} {
	puts "No database"
	return
    }
    sqlite3 DB $watch
    return
}

proc seen {artifactid} {
    return [DB onecolumn {
	SELECT count(*)
	FROM   seen
	WHERE  hash = :artifactid
    }]
}

proc see {pid artifactid} {
    variable dry
    puts -nonewline "  Seen"
    if {$dry} {
	puts " (dry)"
	return
    }
    puts ""
    set now [clock seconds]
    DB eval {
	INSERT INTO seen VALUES (NULL, :pid, :artifactid, :now)
    }
    return
}

proc touch {pid artifactid} {
    #puts "  Touch $artifactid"
    set now [clock seconds]
    DB eval {
	UPDATE seen
	SET atime = :now
	WHERE pid  = :pid
	AND   hash = :artifactid
    }
    return
}

proc config {k} {
    # TODO: Move this information into the ~./.fossil.ewatch state
    #       file, and create tools to show and/or modify it.

    return [DB onecolumn {
	SELECT value FROM config WHERE key = :k
    }]
    # port 465 for tls
}

# # ## ### ##### ######## ############# ######################

proc do {} {
    variable mailcounter 0

    db
    set num [config num-entries]

    # Iterate over all projects.
    DB eval {
	SELECT P.pid        AS pid,
	       P.repository AS url,
	       P.sendermail AS src
	FROM project P
	ORDER BY url
    } {
	do-project $pid $url $src $num
    }

    puts "Generated mails: $mailcounter"
    return
}

proc do-project {pid url sender num} {
    puts -nonewline "Repository $url ..."

    set receivers [DB eval {
	    SELECT R.mail AS dst
	    FROM   project_receiver PR,
	           receiver R
	    WHERE PR.pid = :pid
	    AND   R.rid = PR.rid
	    ORDER BY dst
    }]

    if {![llength $receivers]} {
	puts "  Skipped (no receivers)"
	return
    }

    foreach {artifact title} [process-timeline $pid [get-timeline $url $num]] {
	process-artifact \
	    [get-artifact $url $artifact] \
	    [list send-mail $url $sender $receivers $artifact $title]
	see $pid $artifact
    }

    #puts "Done\n"
    return
}

proc process-artifact {manifest cmd} {
    # changed fields
    set field {}
    set stamp unknown
    set user  {}
    set anote {}

    foreach line [split $manifest \n] {
	if {[regexp {^J (.*) (.*)$} $line -> fname value]} {
	    dict set field $fname [dearmor $value]
	    continue
	}
	if {[regexp {^K (.*)$} $line -> ticket]} continue
	if {[regexp {^D (.*)$} $line -> stamp]} continue
	if {[regexp {^U (.*)$} $line -> user]} continue

	if {[regexp {^A (.*)$} $line -> aref]} continue
	if {[regexp {^C (.*)$} $line -> anote]} continue
    }

    if {[info exists aref]} {
	puts " Attachment"
	lassign $aref aname ticket aref

	dict set field attachment::id   $aref
	dict set field attachment::name $aname
	dict set field attachment::note $anote

	{*}$cmd attachment $ticket $stamp $user $field
	return
    }

    if {[info exists ticket] && [dict size $field]} {
	puts " Ticket"
	{*}$cmd ticket $ticket $stamp $user $field
	return
    }

    puts -nonewline "    Unknown change"
    return
}

proc get-timeline {url num} {
    #puts "  Timeline ($num) ..."
    set r [get $url/timeline.rss?type=t&n=$num]
    if {$r ne {}} { puts "" }
    # Note: type filtering seems to be broken.
    return $r
}

proc get-artifact {url artifact} {
    puts -nonewline "  Artifact $artifact ..."
    get $url/raw?name=$artifact
}

# # ## ### ##### ######## ############# ######################
## http retrieval helper

proc get {url} {
    set token [http::geturl $url]
    if {[http::ncode $token] != 200} {
	puts "Fail: [http::ncode $token] [http::error $token]"
	http::cleanup $token
	return {}
    }

    set data [http::data $token]
    http::cleanup $token
    return $data
}

# # ## ### ##### ######## ############# ######################
## SAX parse timeline RSS

proc process-timeline {pid rss} {
    variable alist    {}
    variable thetitle {}
    variable thepid   $pid

    xml::parser theparser -namespace -final 1 \
	-elementstartcommand  start-element \
	-characterdatacommand char-data \
	-elementendcommand    end-element

    variable tree ROOT
    theparser parse $rss
    rename theparser {}
    # collected information

    #traverse ROOT 0
    return $alist
}

# # ## ### ##### ######## ############# ######################
## SAX parsing callbacks.

proc start-element {name attributes} {
    variable kids
    variable tree
    variable chardata
    set chardata {}
    dict set kids $tree [lappend tree $name] {}
    # # ## ### ##### ######## #############
    ## Bespoke processing
    # # ## ### ##### ######## #############
    return
}

proc char-data {data} {
    variable chardata
    append chardata $data
    return
}

proc end-element {name} {
    variable tree
    variable chardata
    # # ## ### ##### ######## #############
    ## Bespoke processing
    contextmatch {
	{rss channel item title} {
	    if {[regexp {&lt;i&gt;(.*)&lt;/i} $chardata --> part]} {
		set chardata $part
	    } elseif {[regexp {<i>(.*)</i} $chardata --> part]} {
		set chardata $part
	    }
	    variable thetitle [string trim $chardata]
	}
	{rss channel item link} {
	    # chardata = link
	    # ignore anything but /info/...
	    # ignore already seen artifacts as well, except that we
	    # touch them to prevent expiry.
	    if {[regexp {/info/(.*)$} $chardata -> artifact]} {
		if {![seen $artifact]} {
		    variable thetitle
		    variable alist
		    puts "  New: $artifact"
		    #puts "  === ($thetitle)"
		    lappend  alist $artifact $thetitle
		} else {
		    variable thepid
		    touch $thepid $artifact
		}
	    }
	}
    }
    # # ## ### ##### ######## #############
    set tree [lrange $tree 0 end-1]
    return
}

# # ## ### ##### ######## ############# ######################
## SAX support

proc contextmatch {what} {
    variable tree
    set l [expr {[llength $tree] - 1}]
    foreach {pattern script} $what {
	set i [expr {[llength $pattern] - 1}]
	if {$i <= $l} {
	    set ok 1
	    for {set j $l} {$ok && $i >= 0} {incr i -1; incr j -1} {
		if {[lindex $pattern $i] ne [lindex $tree $j]} {
		    set ok 0
		}
	    }
	    if {$ok} {
		uplevel 1 $script
	    }
	}
    }
}

proc traverse {name level} {
    variable kids
    puts [format %*s%s [expr {4 * $level}] {} $name]
    incr level
    if {[dict exists $kids $name]} {
	foreach k [dict keys [dict get $kids $name]] {
	    traverse $k $level
	}
    }
}

# # ## ### ##### ######## ############# ######################

proc send-mail {url sender receivers artifact title what ticket stamp user fields} {
    variable mail
    if {!$mail} {
	puts "    Skip mail"
	return
    }

    set corpus  [generate-mail-$what \
		     $url $sender $artifact $title \
		     $ticket $stamp $user $fields]

    puts "    ================================================"
    puts [textutil::adjust::indent $corpus {        }]
    puts "    ================================================"

    #return

    set token [mime::initialize -string $corpus]

    lappend config -debug     [config debug]
    lappend config -usetls    [config tls]
    lappend config -tlspolicy tls-policy
    lappend config -username  [config user]
    lappend config -password  [config password]
    lappend config -servers   [list [config host]]
    lappend config -ports     [config port]

    foreach dst $receivers {
	puts "    To: $dst"

	set res [smtp::sendmessage $token \
		     -header [list To $dst] \
		     {*}$config]
	foreach item $res {
	    puts "    ERR $item"
	}
    }

    mime::finalize $token
    puts "    Sent"

    variable mailcounter
    incr     mailcounter
    return
}

proc tls-policy {args} {
    puts $args
    return secure
}

proc generate-mail-attachment {url sender artifact title ticket stamp user fields} {
    generate-mail "Attachment" \
	$url $sender $artifact $title $ticket $stamp $user $fields
}

proc generate-mail-ticket {url sender artifact title ticket stamp user fields} {
    generate-mail "Change" \
	$url $sender $artifact $title $ticket $stamp $user $fields
}

proc generate-mail {what url sender artifact title ticket stamp user fields} {
    # NOTE: Mail is currently pure text.
    # Maybe make this a multipart/mixed ? text + html).

    set project [lindex [split $url /] end]
    set tshort  [string range $ticket   0 9]
    set ashort  [string range $artifact 0 9]
    set subject "\[$project\] (Ticket $tshort - $what) $title"

    # Trim the subsecond part of the timestamp.
    # Convert into a non-iso timestamp more suitable to mail readers.
    regsub {\.\d+$} $stamp {} cleaniso
    set maildate [clock format [clock::iso8601::parse_time $cleaniso -gmt 1] -gmt 1]

    # We can pull the HTML for the ticket (change) directly from the
    # repository (see ticket/artifact urls below) include that.  Easy,
    # and automatically follows any layout changes/differences of the
    # various repositories.

    lappend lines "From:    $sender"
    lappend lines "Subject: $subject"
    lappend lines "Date:    $maildate"
    lappend lines "X-Fossil-Ticket-Note: $project"
    lappend lines "X-Tool-Origin:        http://core.tcl.tk/akupries/fossil2git"
    lappend lines ""
    lappend lines "Repository: $url"
    lappend lines ""
    lappend lines "$what Notification For"
    lappend lines "  \[$title\]"
    lappend lines "  Ticket   $url/tktview?name=$ticket"
    lappend lines "  Artifact $url/tinfo?name=$artifact"
    lappend lines "  On       $cleaniso"
    lappend lines "  By       $user"
    lappend lines ""

    struct::matrix M
    M add columns 2
    foreach f [lsort -dict [dict keys $fields]] {
	set v [dict get $fields $f]
	# Special handling...
	switch -exact -- $f {
	    title   -
	    comment -
	    icomment { set v [reformat $v] }
	    cmimetype -
	    mimetype {
		continue ;# = ignore this field
	    }
	    attachment::id {
		# Pseudo field for attached artifacts, id of attachment.
		set v $url/artifact/$v
	    }
	    default  { }
	}
	M add row [list ${f}: $v]
    }

    if {[M rows]} {
	lappend lines "Changed Fields"
	lappend lines [textutil::adjust::indent \
			   [M format 2string] \
			   {  }]
	lappend lines ""
    }
    M destroy

    return [join $lines \n]
}

# # ## ### ##### ######## ############# ######################
## Dearmor fossil strings

set dearmor [list \\s { } \\n \n \\t \t \\r \r]
proc dearmor {s} {
    variable    dearmor
    string map $dearmor $s
}

proc reformat {s} {
    # split into paragraphs. may contain sequences of
    # empty paragraphs.
    set paragraphs {}
    set p {}
    foreach l [split $s \n] {
	if {[string trim $l] eq {}} {
	    lappend paragraphs $p
	    set p {}
	} else {
	    append p $l\n
	}
    }
    lappend paragraphs $p

    # format paragraphs, ignoring empty ones.
    set s {}
    foreach p $paragraphs {
	if {$p eq {}} continue
	append s [textutil::adjust::adjust $p \
		      -strictlength 1 \
		      -length       70] \n\n
    }

    # done
    return [string trimright $s]
}

# # ## ### ##### ######## ############# ######################

main
exit
