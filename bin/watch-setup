#!/usr/bin/env tclsh
# Note a fossil repository for tracking of ticket changes.

package require Tcl 8.5
package require sqlite3

# # ## ### ##### ######## ############# ######################

proc main {} {
    do {*}[cmdline]
    return
}

proc cmdline {} {
    global argv
    if {[llength $argv] != 2} { usage }

    #lassign $argv repository sendermail
    return $argv
}

proc usage {} {
    global argv0
    puts stderr "Usage: $argv0 fossil-repository-url sender-email"
    exit 1
}

# # ## ### ##### ######## ############# ######################

proc dbfile {} {
    set f ~/.fossil.watch
    if {![file exists $f]} { dbsetup $f }
    return $f
}

proc dbsetup {path} {
    sqlite3 DB $path

    # Database Schema
    #
    # seen-artifacts --(n:1) -- project --(n:m)-- receiver
    #
    # project:
    # - repository-url
    # - sender-email
    # seen-artifacts:
    # - project-reference
    # - artifact-hash
    # receiver:
    # - email
    # project-receiver (n:m relation storage)
    # - project reference
    # - receiver reference
    DB eval {
	CREATE TABLE project (
	    pid        INTEGER PRIMARY KEY AUTOINCREMENT,
	    repository STRING UNIQUE,
	    sendermail STRING
        );
	CREATE TABLE receiver (
	    rid  INTEGER PRIMARY KEY AUTOINCREMENT,
	    mail STRING UNIQUE
	);
	CREATE TABLE project_receiver (
	    pid INTEGER REFERENCES project  ( pid ),
	    rid INTEGER REFERENCES receiver ( rid ),
	    UNIQUE (pid, rid )
	);
	CREATE TABLE seen (
	    sid INTEGER PRIMARY KEY AUTOINCREMENT,
	    pid INTEGER REFERENCES project ( pid ),
	    hash STRING UNIQUE
	);
    }
    rename DB {}
    return
}

# # ## ### ##### ######## ############# ######################

proc do {url email} {
    puts "$url ..."
    puts "From: $email"

    sqlite3 DB [dbfile]

    # Create master repository entry
    DB transaction {
	DB eval {
	    INSERT INTO project
	    VALUES (NULL, :url, :email)
	}
    }

    puts ...Done
    return
}

# # ## ### ##### ######## ############# ######################

main
exit
