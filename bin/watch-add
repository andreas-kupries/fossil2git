#!/usr/bin/env tclsh
# Note a fossil repository for tracking of ticket changes.

package require Tcl 8.5
package require sqlite3

# # ## ### ##### ######## ############# ######################

proc main {} {
    do {*}[cmdline]
    return
}

proc cmdline {} {
    global argv
    if {[llength $argv] != 2} { usage }

    #lassign $argv repository receivermail
    return $argv
}

proc usage {} {
    global argv0
    puts stderr "Usage: $argv0 fossil-repository-url receiver-email"
    exit 1
}

# # ## ### ##### ######## ############# ######################

proc dbfile {} {
    set f ~/.fossil.watch
    return $f
}

proc db {} {
    set watch [dbfile]
    if {![file exists $watch]} {
	puts "No database"
	return
    }
    sqlite3 DB $watch
    return
}

# # ## ### ##### ######## ############# ######################

proc do {url email} {
    db

    if {![pidof $url pid]} {
	puts "Unknown repository $url"
	return
    }

    if {[catch {
	DB transaction {
	    DB eval {
		INSERT INTO receiver VALUES ( NULL, :email )
	    }
	    set rid [DB last_insert_rowid]
	}
    }]} {
	ridof $email rid
    }

    puts $url
    puts "To: $email"

    # Link project with receiver and vice versa
    if {[catch {
	DB transaction {
	DB eval {
	    INSERT INTO project_receiver VALUES (:pid, :rid)
	}
	}
    }]} {
	puts "Already linked"
	return
    }

    puts ...Done
    return
}

proc pidof {url pv} {
    set x [DB onecolumn {
	SELECT pid FROM project WHERE repository = :url
    }]
    if {$x eq {}} { return 0 }
    upvar 1 $pv pid
    set pid $x
    return 1
}

proc ridof {mail rv} {
    set x [DB onecolumn {
	SELECT rid FROM receiver WHERE mail = :mail
    }]
    if {$x eq {}} { return 0 }
    upvar 1 $rv rid
    set rid $x
    return 1
}

# # ## ### ##### ######## ############# ######################

main
exit
