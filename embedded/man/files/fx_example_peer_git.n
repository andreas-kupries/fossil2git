'\"
'\" Generated from file 'fx_example_peer_git\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "fx_example_peer_git" n 1 doc "FX - Extended Fossil Management"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
fx_example_peer_git \- fx - Example of mirroring to git peers\&.
.SH SYNOPSIS
package require \fBTcl  8\&.5\fR
.sp
.BE
.SH DESCRIPTION
.PP
Welcome to fx, an application and set of packages providing
extended management commands for the \fBfossil\fR SCM\&.
This is an introductory document to fx, an application
with supporting packages providing users of the Fossil SCM with
extended management facilities going beyond the regular command line\&.
.PP
It is one in a set of related examples demonstrating the
abilities of the system\&. The interested reader can then go on into to
reference documentation via \fIfx - Introduction to fx\fR\&.
.SH "BACKGROUND TO THE EXAMPLE"
.IP [1]
You have to manage one or more git mirrors of your repository\&.
It assumed that the fossil repository is the master, with the
git mirror serving as a read-only backup\&.
.IP [2]
You have (full) access to a repository file of the project\&.
.IP [3]
You have \fBgit\fR-mediated access to the mirror\&.
.PP
.SH "SOLUTION TO THE EXAMPLE"
.SS "SETTING UP"	Exporting to git repositories (the only thing we can currently do with
fx) is nearly as easy to do as setting up a fossil mirror\&.
.PP
Simply run something like:
.CS


	fx peer add-git git@github\&.com:${user}/${repository}\&.git

.CE
with suitable settings for \fBuser\fR and \fBrepository\fR\&. Assuming
that your mirror is on github\&. To suit other hosting service change
the reference per their instructions\&.
.PP
For multiple git mirrors simply add each separately\&.
.PP
The one non-obvious difference to mirroring to other fossil
repositories is the need for a \fIstate\fR directory\&.
This directory holds a local git repository which is a copy of the
fossil repository in question\&. New commits found in fossil are first
imported into this copy, and then pushed out from there to the actual
git mirrors\&.
.PP
Hopefully the above makes it clear that we have only one state
directory for the fossil repository, regardless of the number of git
mirrors\&.  This directory is further only created and initalized if we
have git mirrors at all\&.
.PP
Assuming that the local fossil repository is found at
.IP \(bu
"\fI/path/to/repository/file\fR"
.PP
the default location of the state directory is
.IP \(bu
"\fI/path/to/repository/file\&.peer-state\fR"
.PP
I\&.e\&. the path of the directory is derived from the repository file by
appending the suffix "\fI\&.peer-state\fR"\&.
.PP
If that location is not suitable for some reason it is possible
to explicitly set its location to a path of the user choice, using the
command
.CS


	fx peer state /path/to/the/chosen/state/directory

.CE
.PP
Similary
.CS


	fx peer state

.CE
will print the path of the state directory used by the fossil
repository we are working with\&.
.PP
\fIATTENTION\fR: It is very bad to point multiple fossil
repositories to the same state directory\&. The files and directories in
the state directory have fixed names, causing the fossil repositories
to fight over they contents\&. They do not share\&. Do not do this\&.
.SS GO
With all the preparatory work finally done we can go and start the
mirroring\&. Note however that fx does not fully do
everything by itself\&.
.PP
It assumes that it will be called from a cron job, i\&.e\&. that
all the timing-related things are handled by the system, as is the
prevention of multiple parallel mirroring runs, and where log files
will be located\&.
.PP
As we have full access to the fossil repository file of the
project the only fx command we need in the core job script
is \fBpeer exchange\fR, i\&.e\&.
.CS


    fx peer exchange -R /path/to/the/fossil/repository/file

.CE
.PP
.PP
A few things to remember however:
.IP [1]
cron is notoriously fiddly with regard to the environment
variables provided to the jobs\&. Make sure that:
.IP [2]
Your \fBPATH\fR provides access to
.RS
.IP \(bu
\fBfossil\fR,
.IP \(bu
\fBgit\fR,
.IP \(bu
\fBawk\fR,
.IP \(bu
\fBsed\fR,
.IP \(bu
\fBssh\fR\&.
This last is required if and only if you have git destination
repositories which are accessed through \fIssh\fR urls\&. In
that case you will aslo have to make sure that \fBssh\fR
has access to an \fBssh-agent\fR loaded with all the
necessary keys so that it can run without having to
interactively ask for passwords\&.
.RE
.IP [3]
That a proper \fBUSER\fR variable is set for fossil to
pick up\&.
.PP
.SH "MORE EXAMPLES"
.IP [1]
\fIfx - Example of mirroring with fossil peers\&.\fR
.PP
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems\&.
Please report such at the \fIfx Tracker\fR [https://core\&.tcl\&.tk/akupries/fx]\&.
Please also report any ideas for enhancements you may have for either
package and/or documentation\&.
.SH KEYWORDS
fossil, scm
.SH CATEGORY
Fossil support