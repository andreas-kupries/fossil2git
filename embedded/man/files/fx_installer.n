'\"
'\" Generated from file 'fx_installer\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "fx_install_guide" n 1 doc "FX - Extended Fossil Management"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
fx_install_guide \- fx - The Installer's Guide
.SH SYNOPSIS
package require \fBTcl  8\&.5\fR
.sp
.BE
.SH DESCRIPTION
.PP
Welcome to fx, an application and set of packages providing
extended management commands for the \fBfossil\fR SCM\&.
.PP
Please read the document \fIfx - Introduction to fx\fR,
if you have not done so already, to get an overview of the whole system\&.
.PP
The audience of this document is anyone wishing to build the
application and its supporting packages, for either themselves, or others\&.
.PP
For a developer intending to extend or modify the packages we
additionally provide
.IP [1]
\fIfx - License\fR\&.
.IP [2]
\fIfx - The Developer's Guide\fR\&.
.PP
.PP
Please read \fIfx - How To Get The Sources\fR first, if
that was not done already\&. Here we assume that the sources are already
available in a directory of your choice\&.
.PP
.SH REQUISITES
.SS TCL
As we are building a Tcl package and application it should be pretty
much obvious that a working installation of Tcl itself is needed, and
I will not belabor the point\&.
.PP
Out of the many possibilites use whatever you are comfortable
with, as long as it provides Tcl 8\&.5, or higher\&.
This may be a Tcl installation provided by your operating system
distribution, from a distribution-independent vendor, or built by
yourself\&.
.PP
Myself, I used (and still use)
\fIActiveState's\fR [http://www\&.activestate\&.com]
ActiveTcl 8\&.5 distribution during development, as I am most familiar
with it\&.
.PP
\fI(Disclosure: I, Andreas Kupries, work for ActiveState, maintaining ActiveTcl and TclDevKit for them)\&.\fR
.PP
This distribution can be found at
\fIhttp://www\&.activestate\&.com/activetcl\fR\&. Retrieve the archive of
ActiveTcl 8\&.5 for your platform and install it as directed by
ActiveState\&.
.PP
Assuming that ActiveTcl got installed I usually run the command
.CS


    teacup update

.CE
to install all packages ActiveState provides, and the kitchensink, as
the distribution itself usually contains only the most important set
of packages\&. This ensures that the dependencies for fx are all
present, and more\&.
.PP
If that is not your liking you have to read the other sections
about fx's dependencies to determine the exact set of packages
required, and install only these using
.CS


    teacup install $packagename

.CE
.PP
Both \fBteacup\fR commands above assume that ActiveState's
TEApot repository at \fIhttp://teapot\&.activestate\&.com\fR is in the
list of repositories accessible to \fBteacup\fR\&. This is automatically
ensured for the ActiveTcl distribution\&. Others may have to run
.CS


    teacup archive add http://teapot\&.activestate\&.com

.CE
to make this happen\&.
.PP
For those wishing to build and install Tcl on their own, the
relevant sources can be found at
.TP
Tcl
\fIhttp://core\&.tcl\&.tk/tcl/\fR
.PP
together with the necessary instructions on how to build it\&.
.PP
If there are problems with building, installing, or using Tcl
please file a bug against Tcl, or the vendor of your distribution, and
not fx\&.
.SS KETTLE
This project uses the Kettle application and package as its build system\&.
.PP
Please go to either the main repository at
\fIhttp://core\&.tcl\&.tk/akupries/kettle\fR
or the backup at
\fIhttp://chiselapp\&.com/andreas_kupries/repositories/Kettle\fR
and follow the instructions given at these sites to create a working
installation\&. They are not repeated here\&. If there are problems with
these instructions please file a bug against the Kettle project, and
not \fBfx\fR\&.
.PP
.SS LINENOISE
The framework uses the \fBlinenoise\fR package in its implementation\&.
This package requires Tcl 8\&.5 or higher\&.
.PP
Out of the many possibilites for getting Linenoise (OS vendor,
os-independent vendor, building from sources) use whatever you are
comfortable with\&.
.PP
For myself, I am most comfortable with using
\fIActiveState's\fR [http://www\&.activestate\&.com]
ActiveTcl distribution and TEApot\&.
.PP
See the previous section (\fBTcl\fR) for disclosure and
information on how to get it\&.
.PP
Assuming that ActiveTcl got installed running the command
.CS


    teacup install linenoise

.CE
will install the package for your platform, if you have not done the
more inclusive
.CS


    teacup update

.CE
to get everything and the kitchensink\&.
.PP
For those wishing to build and install Linenoise on their own,
the relevant sources can be found at
\fIhttp://github\&.com/andreas-kupries/tcl-linenoise\fR together with
the necessary instructions on how to build it\&.
.PP
If there are problems with building, installing, or using
linenoise please file a bug against Linenoise, or the vendor
of your distribution, and not \fBfx\fR\&.
.SS CMDR
This project uses the Cmdr framework as the basis of it cli processing\&.
.PP
Please go to either the main repository at
\fIhttp://core\&.tcl\&.tk/akupries/cmdr\fR
or the backup at
\fIhttp://chiselapp\&.com/andreas_kupries/repositories/Cmdr\fR
and follow the instructions given at these sites to create a working
installation\&. They are not repeated here\&. If there are problems with
these instructions please file a bug against the Cmdr project, and
not \fBfx\fR\&.
.PP
.SS TCLLIB
fx's internals require the following 11 packages found in
Tcllib\&.
.IP [1]
\fBclock::iso8601\fR
.IP [2]
\fBdebug\fR
.IP [3]
\fBdebug::caller\fR
.IP [4]
\fBinterp\fR
.IP [5]
\fBlambda\fR
.IP [6]
\fBmime\fR
.IP [7]
\fBreport\fR
.IP [8]
\fBsmtp\fR
.IP [9]
\fBstruct::matrix\fR
.IP [10]
\fBterm::ansi::code::ctrl\fR
.IP [11]
\fBtextutil::adjust\fR
.IP [12]
\fBtry\fR
.PP
.PP
Beyond that however the rest of Kettle will be fully
functional\&.
.PP
Out of the many possibilities for getting Tcllib (OS vendor,
os-independent vendor, building from sources) use whatever you are
comfortable with\&.
.PP
For myself, I am most comfortable with using
\fIActiveState's\fR [http://www\&.activestate\&.com]
ActiveTcl distribution and TEApot\&.
.PP
See the previous section (\fBTcl\fR) for disclosure and
information on how to get it\&.
.PP
Assuming that ActiveTcl got installed running the commands
.CS


    teacup install clock::iso8601
    teacup install debug
    teacup install debug::caller
    teacup install interp
    teacup install lambda
    teacup install mime
    teacup install report
    teacup install smtp
    teacup install struct::matrix
    teacup install term::ansi::code::ctrl
    teacup install textutil::adjust
    teacup install try

.CE
will install them for your platform, if you have not done the more
inclusive
.CS


    teacup update

.CE
to get everything and the kitchensink\&.
.PP
For those wishing to build and install Tcllib on their own, the
relevant sources can be found at
.TP
Tcllib
\fIhttp://sourceforge\&.net/projects/tcllib\fR
.PP
together with the necessary instructions on how to build it\&.
.PP
If there are problems with building, installing, or using Tklib
and its packages please file a bug against Tklib, or the vendor of
your distribution, and not fx
.SS TCLOO
The framework uses the \fBTclOO\fR package in its implementation\&.
This package requires Tcl 8\&.5 or higher\&.
.PP
In Tcl 8\&.6 the package is part of the core itself, without
requiring a separate installation\&.
.PP
For Tcl 8\&.5 it has to be installed separately\&.
.PP
Out of the many possibilites for getting TclOO (OS vendor,
os-independent vendor, building from sources) use whatever you are
comfortable with\&.
.PP
For myself, I am most comfortable with using
\fIActiveState's\fR [http://www\&.activestate\&.com]
ActiveTcl distribution and TEApot\&.
.PP
See the previous section (\fBTcl\fR) for disclosure and
information on how to get it\&.
.PP
Assuming that ActiveTcl got installed running the command
.CS


    teacup install TclOO

.CE
will install the package for your platform, if you have not done the
more inclusive
.CS


    teacup update

.CE
to get everything and the kitchensink\&.
.PP
For those wishing to build and install TclOO on their own, the
relevant sources can be found at \fIhttp://core\&.tcl\&.tk/tcloo\fR
together with the necessary instructions on how to build it\&.
.PP
If there are problems with building, installing, or using TclOO
and its packages please file a bug against TclOO, or the vendor of
your distribution, and not \fBfx\fR\&.
.SS TCLX
The project uses the \fBTclx\fR package in its implementation\&.
.PP
Out of the many possibilites for getting Tclx (OS vendor,
os-independent vendor, building from sources) use whatever you are
comfortable with\&.
.PP
For myself, I am most comfortable with using
\fIActiveState's\fR [http://www\&.activestate\&.com]
ActiveTcl distribution and TEApot\&.
.PP
See the previous section (\fBTcl\fR) for disclosure and
information on how to get it\&.
.PP
Assuming that ActiveTcl got installed running the command
.CS


    teacup install Tclx

.CE
will install Tclx for your platform, if you have not done the more inclusive
.CS


    teacup update

.CE
to get everything and the kitchensink\&.
.PP
For those wishing to build and install Tclx on their own, the
relevant sources can be found at
.TP
Tclx
\fIhttp://sourceforge\&.net/projects/tclx\fR
.PP
together with the necessary instructions on how to build it\&.
.PP
If there are problems with building, installing, or using Tclx
please file a bug against Tclx, or the vendor of your distribution,
and not fx\&.
.SS SQLITE3
The framework uses the \fBsqlite3\fR package in its implementation\&.
.PP
Out of the many possibilites for getting Sqlite3 (OS vendor,
os-independent vendor, building from sources) use whatever you are
comfortable with\&.
.PP
For myself, I am most comfortable with using
\fIActiveState's\fR [http://www\&.activestate\&.com]
ActiveTcl distribution and TEApot\&.
.PP
See the previous section (\fBTcl\fR) for disclosure and
information on how to get it\&.
.PP
Assuming that ActiveTcl got installed running the command
.CS


    teacup install sqlite3

.CE
will install the package for your platform, if you have not done the
more inclusive
.CS


    teacup update

.CE
to get everything and the kitchensink\&.
.PP
For those wishing to build and install sqlite3 on their own,
the relevant sources (of a TEA-based Tcl extension) can be found at
\fIhttp://sqlite\&.org/download\&.html\fR together with the necessary
instructions on how to build it\&.
.PP
If there are problems with building, installing, or using Sqlite3
and its packages please file a bug against Sqlite3, or the vendor of
your distribution, and not \fBfx\fR\&.
.SH "BUILD & INSTALLATION"
To install fx simply run
.CS


    /path/to/tclsh8\&.5 /path/to/fx/build\&.tcl install

.CE
where "\fI/path/to/tclsh8\&.5\fR" is the tclsh of your Tcl installation, and
"\fI/path/to/fx\fR" the location of the fx sources on your system\&.
.PP
This will build the package and application and then places them into
directories where the \fBtclsh8\&.5\fR will find them\&. Note that the
installed fx application is modified to use the chosen tclsh
instead of searching for one on the \fBPATH\fR\&.
.PP
On Windows you can invoke the file "\fIbuild\&.tcl\fR" with a
double-click\&.  This will pop up a small graphical interface for
entering the destination and performing the installation\&. This
handling of a double-click is restricted to Windows only however\&.
.PP
On unix the same GUI is acessible by invoking "\fIbuild\&.tcl\fR" using
\fBgui\fR instead of \fBinstall\fR in the example above\&.
.PP
To get help about the methods of "\fIbuild\&.tcl\fR", and their complete
syntax, invoke "\fIbuild\&.tcl\fR" with argument \fBhelp\fR, i\&.e\&., like
.CS


    /path/to/tclsh8\&.5 /path/to/fx/build\&.tcl help

.CE
Other methods for getting various types of help are:
.IP [1]
help-recipes
.IP [2]
help-options
.IP [3]
help
.IP [4]
list-recipes
.IP [5]
list-options
.IP [6]
list
.IP [7]
show-configuration
.PP
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems\&.
Please report such at the \fIfx Tracker\fR [https://core\&.tcl\&.tk/akupries/fx]\&.
Please also report any ideas for enhancements you may have for either
package and/or documentation\&.
.SH KEYWORDS
fossil, scm
.SH CATEGORY
Fossil support